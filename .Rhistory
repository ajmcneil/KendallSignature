cor(data, method="kendall")
kappa
data <- as.matrix(iris[,1:4])
estsignature <- function(data){
sgns <- signsofpairs(data)
n <- dim(data)[1]
vals <- apply(codingset((1:2^(d-1)), d), 1, paste, collapse = "")
ties <- apply(sgns, 1, function(v){0 %in% v})
v1 <- sgns[!ties, ]
t1 <- unclass(table(factor(quadrants(v1, diagonal = TRUE), levels = vals)))
if (sum(ties) > 0){
v2 <- sgns[ties,]
v3 <- v2
v2[v2==0] <- 1
v3[v3==0] <- -1
t2 <- unclass(table(factor(quadrants(v2, diagonal = TRUE), levels = vals)))
t3 <- unclass(table(factor(quadrants(v3, diagonal = TRUE), levels = vals)))
t1 <- t1 + (t2+t3)/2
}
weights <- 2*t1/(n*(n-1))
weights
}
estsignature(data)
sum(estsignature(data))
data <- as.matrix(iris[,1:4])
estsignature <- function(data){
sgns <- signsofpairs(data)
n <- dim(data)[1]
d <- dim(data)[2]
vals <- apply(codingset((1:2^(d-1)), d), 1, paste, collapse = "")
ties <- apply(sgns, 1, function(v){0 %in% v})
v1 <- sgns[!ties, ]
t1 <- unclass(table(factor(quadrants(v1, diagonal = TRUE), levels = vals)))
if (sum(ties) > 0){
v2 <- sgns[ties,]
v3 <- v2
v2[v2==0] <- 1
v3[v3==0] <- -1
t2 <- unclass(table(factor(quadrants(v2, diagonal = TRUE), levels = vals)))
t3 <- unclass(table(factor(quadrants(v3, diagonal = TRUE), levels = vals)))
t1 <- t1 + (t2+t3)/2
}
weights <- 2*t1/(n*(n-1))
Amatrix(d) %*% weights
}
kappa <- estsignature(data)
kappa
2*kappa - 1
cor(data, method="kendall")
library(mvtnorm)
P <- matrix(c(1, 0.4, 0.7, 0.3, 0.4, 1, -0.1, -0.2, 0.7, -0.1, 1, 0.5, 0.3, -0.2, 0.5, 1), nrow = 4)
eigen(P)
data <- rmvnorm(1000, sigma = P)
kappa <- estsignature(data)
kappa
2*kappa - 1
cor(data, method="kendall")
combs <- gtools::combinations(d, nelements, repeats.allowed = FALSE)
Amatrix(4)
#' Construct A matrix in dimension d
#'
#' @param d the dimension
#'
#' @return a square matrix with 2^(d-1) rows and columns
#' @export
#'
#' @examples
#' Amatrix(4)
Amatrix <- function(d){
kmax <- 2 ^ (d - 1)
A <- matrix(1, nrow = kmax, ncol  = kmax)
dimnames(A)[[1]][1] <- "empty"
coding <- codingset(1:kmax, d)
layers <- floor(d / 2)
n_layer <- sapply(1:layers, function(x, d){choose(d, 2 * x)}, d = d)
pos <- 1
for (j in 1:layers) {
nelements <- 2 * j
combs <- gtools::combinations(d, nelements, repeats.allowed = FALSE)
for (i in 1:n_layer[j]) {
thecomb <- combs[i, ]
A[pos + 1,] <-
apply(
coding[, thecomb],
1,
FUN = function(v) {
(length(unique(v)) == 1)
}
)
dimnames(A)[[1]][pos+1] <- paste(thecomb,collapse=",")
pos <- pos + 1
}
}
A
}
Amatrix(3)
#' Construct A matrix in dimension d
#'
#' @param d the dimension
#'
#' @return a square matrix with 2^(d-1) rows and columns
#' @export
#'
#' @examples
#' Amatrix(4)
Amatrix <- function(d){
kmax <- 2 ^ (d - 1)
A <- matrix(1, nrow = kmax, ncol  = kmax)
dimnames(A)[[1]] <- c("empty", kmax)
coding <- codingset(1:kmax, d)
layers <- floor(d / 2)
n_layer <- sapply(1:layers, function(x, d){choose(d, 2 * x)}, d = d)
pos <- 1
for (j in 1:layers) {
nelements <- 2 * j
combs <- gtools::combinations(d, nelements, repeats.allowed = FALSE)
for (i in 1:n_layer[j]) {
thecomb <- combs[i, ]
A[pos + 1,] <-
apply(
coding[, thecomb],
1,
FUN = function(v) {
(length(unique(v)) == 1)
}
)
dimnames(A)[[1]][pos+1] <- paste(thecomb,collapse=",")
pos <- pos + 1
}
}
A
}
Amatrix(3)
?dimnames
tmp <- matrix(1,10,3)
tmp
dimnames(tmp)
dimnames(tmp)[[1]] <- rep("empty", 10)
tmp
#' Construct A matrix in dimension d
#'
#' @param d the dimension
#'
#' @return a square matrix with 2^(d-1) rows and columns
#' @export
#'
#' @examples
#' Amatrix(4)
Amatrix <- function(d){
kmax <- 2 ^ (d - 1)
A <- matrix(1, nrow = kmax, ncol  = kmax)
dimnames(A)[[1]] <- rep("empty", kmax)
coding <- codingset(1:kmax, d)
layers <- floor(d / 2)
n_layer <- sapply(1:layers, function(x, d){choose(d, 2 * x)}, d = d)
pos <- 1
for (j in 1:layers) {
nelements <- 2 * j
combs <- gtools::combinations(d, nelements, repeats.allowed = FALSE)
for (i in 1:n_layer[j]) {
thecomb <- combs[i, ]
A[pos + 1,] <-
apply(
coding[, thecomb],
1,
FUN = function(v) {
(length(unique(v)) == 1)
}
)
dimnames(A)[[1]][pos+1] <- paste(thecomb,collapse=",")
pos <- pos + 1
}
}
A
}
Amatrix(3)
Amatrix(4)
estsignature <- function(data){
sgns <- signsofpairs(data)
n <- dim(data)[1]
d <- dim(data)[2]
vals <- apply(codingset((1:2^(d-1)), d), 1, paste, collapse = "")
ties <- apply(sgns, 1, function(v){0 %in% v})
v1 <- sgns[!ties, ]
t1 <- unclass(table(factor(quadrants(v1, diagonal = TRUE), levels = vals)))
if (sum(ties) > 0){
v2 <- sgns[ties,]
v3 <- v2
v2[v2==0] <- 1
v3[v3==0] <- -1
t2 <- unclass(table(factor(quadrants(v2, diagonal = TRUE), levels = vals)))
t3 <- unclass(table(factor(quadrants(v3, diagonal = TRUE), levels = vals)))
t1 <- t1 + (t2+t3)/2
}
weights <- 2*t1/(n*(n-1))
Amatrix(d) %*% weights
}
kappa <- estsignature(data)
kappa
2*kappa - 1
cor(data, method="kendall")
?table
estsignature <- function(data){
sgns <- signsofpairs(data)
n <- dim(data)[1]
d <- dim(data)[2]
vals <- apply(codingset((1:2^(d-1)), d), 1, paste, collapse = "")
ties <- apply(sgns, 1, function(v){0 %in% v})
t1 <- quadrants(sgns[!ties, ], diagonal = TRUE)
t1 <- table(t1, levels = vals))
if (sum(ties) > 0){
v2 <- sgns[ties,]
v3 <- v2
v2[v2==0] <- 1
v3[v3==0] <- -1
t2 <- unclass(table(factor(quadrants(v2, diagonal = TRUE), levels = vals)))
t3 <- unclass(table(factor(quadrants(v3, diagonal = TRUE), levels = vals)))
t1 <- t1 + (t2+t3)/2
}
weights <- 2*t1/(n*(n-1))
Amatrix(d) %*% weights
}
kappa <- estsignature(data)
kappa
data <- as.matrix(iris[,1:4])
kappa <- estsignature(data)
kappa
2*kappa - 1
estsignature <- function(data){
sgns <- signsofpairs(data)
n <- dim(data)[1]
d <- dim(data)[2]
vals <- apply(codingset((1:2^(d-1)), d), 1, paste, collapse = "")
ties <- apply(sgns, 1, function(v){0 %in% v})
t1 <- quadrants(sgns[!ties, ], diagonal = TRUE)
t1 <- table(t1, levels = vals))
if (sum(ties) > 0){
v2 <- sgns[ties,]
v3 <- v2
v2[v2==0] <- 1
v3[v3==0] <- -1
t2 <- table(factor(quadrants(v2, diagonal = TRUE), levels = vals))
t3 <- table(factor(quadrants(v3, diagonal = TRUE), levels = vals))
t1 <- t1 + (t2+t3)/2
}
weights <- 2*t1/(n*(n-1))
Amatrix(d) %*% weights
}
kappa <- estsignature(data)
estsignature <- function(data){
sgns <- signsofpairs(data)
n <- dim(data)[1]
d <- dim(data)[2]
vals <- apply(codingset((1:2^(d-1)), d), 1, paste, collapse = "")
ties <- apply(sgns, 1, function(v){0 %in% v})
t1 <- quadrants(sgns[!ties, ], diagonal = TRUE)
t1 <- table(t1, levels = vals))
if (sum(ties) > 0){
v2 <- sgns[ties,]
v3 <- v2
v2[v2==0] <- 1
v3[v3==0] <- -1
t2 <- table(factor(quadrants(v2, diagonal = TRUE), levels = vals))
t3 <- table(factor(quadrants(v3, diagonal = TRUE), levels = vals))
t1 <- t1 + (t2+t3)/2
}
weights <- 2*t1/(n*(n-1))
Amatrix(d) %*% weights
}
estsignature <- function(data){
sgns <- signsofpairs(data)
n <- dim(data)[1]
d <- dim(data)[2]
vals <- apply(codingset((1:2^(d-1)), d), 1, paste, collapse = "")
ties <- apply(sgns, 1, function(v){0 %in% v})
t1 <- quadrants(sgns[!ties, ], diagonal = TRUE)
t1 <- table(t1, levels = vals)
if (sum(ties) > 0){
v2 <- sgns[ties,]
v3 <- v2
v2[v2==0] <- 1
v3[v3==0] <- -1
t2 <- table(factor(quadrants(v2, diagonal = TRUE), levels = vals))
t3 <- table(factor(quadrants(v3, diagonal = TRUE), levels = vals))
t1 <- t1 + (t2+t3)/2
}
weights <- 2*t1/(n*(n-1))
Amatrix(d) %*% weights
}
kappa <- estsignature(data)
data <- rmvnorm(1000, sigma = P)
estsignature <- function(data){
sgns <- signsofpairs(data)
n <- dim(data)[1]
d <- dim(data)[2]
vals <- apply(codingset((1:2^(d-1)), d), 1, paste, collapse = "")
ties <- apply(sgns, 1, function(v){0 %in% v})
t1 <- quadrants(sgns[!ties, ], diagonal = TRUE)
t1 <- table(t1, levels = vals)
if (sum(ties) > 0){
v2 <- sgns[ties,]
v3 <- v2
v2[v2==0] <- 1
v3[v3==0] <- -1
t2 <- table(factor(quadrants(v2, diagonal = TRUE), levels = vals))
t3 <- table(factor(quadrants(v3, diagonal = TRUE), levels = vals))
t1 <- t1 + (t2+t3)/2
}
weights <- 2*t1/(n*(n-1))
Amatrix(d) %*% weights
}
kappa <- estsignature(data)
estsignature <- function(data){
sgns <- signsofpairs(data)
n <- dim(data)[1]
d <- dim(data)[2]
vals <- apply(codingset((1:2^(d-1)), d), 1, paste, collapse = "")
ties <- apply(sgns, 1, function(v){0 %in% v})
t1 <- quadrants(sgns[!ties, ], diagonal = TRUE)
t1 <- table(factor(t1, levels = vals))
if (sum(ties) > 0){
v2 <- sgns[ties,]
v3 <- v2
v2[v2==0] <- 1
v3[v3==0] <- -1
t2 <- table(factor(quadrants(v2, diagonal = TRUE), levels = vals))
t3 <- table(factor(quadrants(v3, diagonal = TRUE), levels = vals))
t1 <- t1 + (t2+t3)/2
}
weights <- 2*t1/(n*(n-1))
Amatrix(d) %*% weights
}
kappa <- estsignature(data)
kappa
2*kappa - 1
cor(data, method="kendall")
data <- as.matrix(iris[,1:4])
estsignature <- function(data){
sgns <- signsofpairs(data)
n <- dim(data)[1]
d <- dim(data)[2]
vals <- apply(codingset((1:2^(d-1)), d), 1, paste, collapse = "")
ties <- apply(sgns, 1, function(v){0 %in% v})
t1 <- quadrants(sgns[!ties, ], diagonal = TRUE)
t1 <- table(factor(t1, levels = vals))
if (sum(ties) > 0){
v2 <- sgns[ties,]
v3 <- v2
v2[v2==0] <- 1
v3[v3==0] <- -1
t2 <- table(factor(quadrants(v2, diagonal = TRUE), levels = vals))
t3 <- table(factor(quadrants(v3, diagonal = TRUE), levels = vals))
t1 <- t1 + (t2+t3)/2
}
weights <- 2*t1/(n*(n-1))
Amatrix(d) %*% weights
}
kappa <- estsignature(data)
kappa
2*kappa - 1
cor(data, method="kendall")
library(extremalcopula)
kappa <- estsignature(data)
kappa
names(as.vector(kappa))
names(kappa[,1])
drop(kappa)
library(extremalcopula)
devtools::document()
devtools::build_vignettes()
library(extremalcopula)
install.packages("~/Dropbox/Research/Current/Concordance/extremalcopula_0.1.0.tar.gz", repos = NULL, type = "source")
data <- as.matrix(iris[,1:2])
kappa <- estsignature(data)
kappa
2*kappa - 1
cor(data, method="kendall")
data <- as.matrix(iris[,1:4])
kappa <- estsignature(data)
kappa
2*kappa - 1
library(extremalcopula)
?plotHull3D
library(gMOIP)
?plotHull3D
# 5d feasible example - fix pairwise taus
d <- 5
kappa <- rep(2/3, choose(d, 2))
w <- findpolytope(c(1, kappa, 0.4, 0.4), d = d)
# there are 22 vertices
w
library(extremalcopula)
library(rcdd)
p
w <- findpolytope(c(1, kappa, 0.4, 0.4), d = d)
# there are 22 vertices
w
# find corresponding concordance probabilities
allkappa <- Amatrix(d) %*% t(w)
allkappa
# get ranges for higher concordance probabilities
apply(allkappa, 1, summary)
allkappa2 <- allkappa[14:16,]
library(gMOIP)
plotHull3D(t(allkappa2))
seRch()
search()
library(rgl)
plotHull3D(t(allkappa2))
q()
?plot3d
?rgl::plot3d
devtools::document()
devtools::build_vignettes()
library(extremalcopula)
install.packages("~/Dropbox/Research/Current/Concordance/extremalcopula_0.1.0.tar.gz", repos = NULL, type = "source")
q()
library(extremalcopula)
library(extremalcopula)
library(copula)
library(rgl)
n <- 1000
d <- 3
corvals <- c(0.2, 0.5, 0.8)
P <- p2P(corvals)
tcop <- tCopula(
df = 0.02,
param = corvals,
dim = d,
dispstr = "un"
)
set.seed(13)
data <- rCopula(n, tcop)
plot3d(data,xlab="U1",ylab="U2",zlab="U3")
tau <- 2*asin(corvals)/pi
kappa <- c(1, (1 + tau)/2)
findextremal(kappa)
library(extremalcopula)
findextremal(kappa)
Amatrix(3)
library(extremalcopula)
Amatrix(3)
Amatrix(6)
Amatrix(4)
library(extremalcopula)
Amatrix(4)
library(extremalcopula)
Amatrix(4)
library(extremalcopula)
library(extremalcopula)
library(extremalcopula)
library(extremalcopula)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(copula)
library(extremalcopula)
library(rgl)
knitr::knit_hooks$set(webgl = hook_webgl)
corvals <- c(0.3, 0.5, 0.8)
tcop <- tCopula(
df = 0.02,
param = corvals,
dim = 3,
dispstr = "un"
)
set.seed(13)
n <- 2000
data <- rCopula(n, tcop)
plot3d(data, xlab = "U1", ylab = "U2", zlab = "U3")
corvals <- c(0.3, 0.5, 0.8)
tcop <- tCopula(
df = 0.02,
param = corvals,
dim = 3,
dispstr = "un"
)
set.seed(13)
n <- 2000
data <- rCopula(n, tcop)
plot3d(data, xlab = "U1", ylab = "U2", zlab = "U3")
corvals <- c(0.3, 0.5, 0.8)
tcop <- tCopula(
df = 0.02,
param = corvals,
dim = 3,
dispstr = "un"
)
set.seed(13)
n <- 2000
data <- rCopula(n, tcop)
plot3d(data, xlab = "U1", ylab = "U2", zlab = "U3")
table(quadrants(sign(data - 0.5), diagonal = TRUE))/n
kappa <- consignature(p2P(corvals))
kappa
solve(Amatrix(3), kappa)
P <- copula::p2P((1:15) / 16)
P
kappa <- consignature(P)
kappa
A <- Amatrix(nrow(P), names = FALSE)
solve(A, kappa)
table <- extremaltable(consignature(P))
P
consignature(P)
library(extremalcopula)
library(extremalcopula)
devtools::document()
devtools::build_vignettes()
install.packages("~/Dropbox/Research/Current/Concordance/extremalcopula_0.1.0.tar.gz", repos = NULL, type = "source")
library(extremalcopula)
